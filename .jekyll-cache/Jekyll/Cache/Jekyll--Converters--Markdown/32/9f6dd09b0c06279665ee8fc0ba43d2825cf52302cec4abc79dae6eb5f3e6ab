I"`	<p>Android 개발자로 추후 진로를 결정할 생각은 없지만, 어찌다 보니 지금 하고 있는 프로젝트가 안드로이드 어플리케이션이다. <del>(그래도 아직은 생각 없다)</del>
나름 Google Playstore에도 올려서 서비스를 진행할 어플리케이션이라 안정성을 신경써야 하기 때문에 <strong>ViewModel</strong> 이란 개념을 도입해서 개발하기로 했다.</p>

<p>새로운 개념이니만큼 이해하기 쉽게 설명을 하는 방향으로 잡았다.:smile:</p>

<h2 id="mvvm이란">MVVM이란?</h2>

<p>ViewModel을 알기 전 <code class="language-plaintext highlighter-rouge">MVVM</code>이란 개념을 알아야하는데, ViewModel이 여기서 파생되었기 떄문이다.</p>

<p><img src="/assets/images/MVVM_Pattern.png" alt="MVVMPattern" /></p>

<p><strong>MVVM(model-view-viewmodel)</strong> 패턴은 하나의  코드에서 사용자에게 보여지는 <code class="language-plaintext highlighter-rouge">GUI</code> 부분, 즉 <strong>View</strong> 를 비즈니스 로직(모델)로부터 분리하여 독립적인 역할로써 존재하게 하는 <code class="language-plaintext highlighter-rouge">Software Architecture</code> 패턴이다. 기술이 발전할수록 개발되는 프로그램들은 점점 거대하져 가기에 기능에 있어 역할들을 세분하여 독립적이게 하는 것도 점점 중요한 주제가 되어가고 있다. MVVM은 View에 있어 그런 니즈를 충족시키위해 태어났다고 보면 된다.</p>

<ol>
  <li>View에서는 사용자가 스크린에서 보이는 <strong>UI</strong> 적인 요소만 독립적으로 정의한다. 오직 어떻게 보일지에 대한 것만 구현한다는 뜻이다. 또한 사용자와의 상호작용을 수신하여 이에 대한 처리를 <code class="language-plaintext highlighter-rouge">Data binding</code>을 통해 ViewModel에게 전달한다.</li>
  <li>Model에서는 해당 프로그램에서 사용할 <strong>Data</strong> 와 그 Data에 대한 처리들을 정의한다.</li>
  <li>ViewModel에서는 위의 그림과 마찬가지로 이 View와 Model의 다리가 되어준다고 생각하면 쉽다. Model과 커뮤니케이션하여 데이터들을 가져와 이를 알맞게 가공하여 View가 오직 이 데이터들을 표현하는데에만 집중할 수 있도록 조력자 역할을 한다.</li>
</ol>

:ET