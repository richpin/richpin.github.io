I"x<p>이번에는 <strong>Thread(스레드)</strong>에 대해 알아보도록 합시다.</p>

<h1 id="thread란-무엇일까">Thread란 무엇일까?</h1>

<p><code class="language-plaintext highlighter-rouge">Thread</code>의 기본적인 정의는 어떠한 프로그램 내에서, 특히 프로세스 내에서 실행되는 흐름의 단위를 뜻합니다. 흔히 우리가 아는 프로레스는 사실 하나의 프로그램이고 그 프로세스는 적어도 하나의 이상의 스레드를 가지게 되는 것이죠. 같은 코드를 실행하는 각기 다른 <code class="language-plaintext highlighter-rouge">Program Counter</code>가 있다고 생각하시면 쉬울 겁니다. 스레드는 <code class="language-plaintext highlighter-rouge">address space</code>를 공유합니다. 즉 같은 코드와 데이터를 가지고 각기 다른 부분을 실행하는 것이지요. 다만 각각의 스레드는 자신만의 <code class="language-plaintext highlighter-rouge">stack</code>과 <code class="language-plaintext highlighter-rouge">register(including PC)</code>을 가지게 됩니다. 병렬성을 위한 존재하는 만큼 context switching이 가능하며 그 단위로 <code class="language-plaintext highlighter-rouge">TCB(Thread Control Block)</code>을 가집니다. 요즘 대부분의 프로그램들은 <code class="language-plaintext highlighter-rouge">Mult-threaded</code>로 만들어지고 있죠.</p>

<p>왜 우리는 스레드를 사용해야 할까요?</p>

<ul>
  <li>Parallelism - 여러 개의 processor가 장착된 컴퓨터에서 여러 스레드를 돌린다면 빨라지겠죠?</li>
  <li>I/O overraping - 하나의 프로세서라도 어떤 스레드가 I/O를 기다리고 있는 동안 다른 스레드가 돌아간다면 매우 효율적일 것입니다.</li>
  <li>light-weight - 프로세스보다 스레드를 만드는 것이 훨씬 가벼운 작업입니다.</li>
</ul>

<blockquote>
  <p><strong>스레드는 데이터를 공유한다</strong></p>
</blockquote>

<p>다만, 이와 같은 특징으로 인해 <code class="language-plaintext highlighter-rouge">logically separate</code>한 task에서는 스레드보다 프로세스가 더 나을 수 있습니다. 그러나 같은 코드를 나누어 동시적으로 실행한다는 장점 때문에 어플리케이션들에서는 <code class="language-plaintext highlighter-rouge">Update display</code>, <code class="language-plaintext highlighter-rouge">Fetch data</code>, <code class="language-plaintext highlighter-rouge">Answer a network request</code>와 같이 해야하는 일을 동시다발적으로 돌려 빠르게 효율성을 극대화하고 있습니다.
(+ 커널 또한 Multithreaded입니다.)</p>

<p>다시 정리하자면,</p>

<ul>
  <li>Responsiveness - 프레세스의 어느 부분이 잠시 막히더라도, 더 <code class="language-plaintext highlighter-rouge">user interface</code>와 같이 더 중요한 작업들을 계속해서 해나갈 수 있습니다.</li>
  <li>Resource Sharing - 스레드의 가장 큰 특징으로 스레드들끼리는 리소스를 공유합니다.</li>
  <li>Economy - 프로세스보다 훨씬 가볍습니다.</li>
  <li>Scalability - 멀티 프레세스 시스템에서 프로세스들이 이득을 볼 수 있는 것은 다 스레드가 있기에 가능한 일입니다.</li>
</ul>

<h1 id="thread의-치명적-문제점">Thread의 치명적 문제점</h1>

<p>데이터를 공유한다는 스레드의 가장 큰 특징은 사실 스레드의 가장 큰 약점이 되기도 합니다.
아와 같은 상황을 생각해 봅시다.</p>

<p><img src="/assets/img/os_thread/uncontrolled_scheduling" alt="uncontrolled_scheduling" /></p>
:ET