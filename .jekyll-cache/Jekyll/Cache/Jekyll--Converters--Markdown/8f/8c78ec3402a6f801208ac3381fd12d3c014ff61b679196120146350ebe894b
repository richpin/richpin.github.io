I"<p><code class="language-plaintext highlighter-rouge">Recyclerview</code>를 다루다 보면 가장 위에 다른 형태의 컨텐츠를 달아야 할 때가 있을 것이다. 내가 말하고자 하는 것은 항상 고정되어 있는 형태가 아닌 <code class="language-plaintext highlighter-rouge">Recyclerview</code>와 같이 <code class="language-plaintext highlighter-rouge">scroll</code>이 가능한 즉, <code class="language-plaintext highlighter-rouge">Header</code>를 다는 것이다. 나의 경우에는 SNS처럼 커뮤니티 기능을 만드는 도중 가장 위에 마치 게시판같이 환영 멘트, 새로운 정보, 광고 등의 정보를 달 공간이 필요했다. 그리고 내가 원하는 것은 고정되어 있는 것이 아닌 <code class="language-plaintext highlighter-rouge">Recyclerview</code>와 같이 스크롤이 되는 관계이기를 원했다.</p>

<h2 id="무슨-방법들이-있을까">무슨 방법들이 있을까?</h2>

<p>이와 같은 문제를 구글링 해보면 가장 흔하게 접하는 것이 바로 <code class="language-plaintext highlighter-rouge">Nested Scroll View</code>를 이용하라는 것이다. 여러 <code class="language-plaintext highlighter-rouge">Layout</code>들을 묶어 마치 하나처럼 <code class="language-plaintext highlighter-rouge">scroll</code> 되는 이 방법을 나도 처음 써보았다. 동작 자체는 원하는 대로 되었지만, 성능의 문제가 발생했다. 아무래도 커뮤니티인만큼 굉장히 동적으로 동작하는 <code class="language-plaintext highlighter-rouge">Recyclerview</code>라서 그런지 전에 없었던 버벅임이 도저히 감당할 수 없을 정도로 심했다. 이해가 가지 않어 원인을 찾아보려 애썼지만 결국 포기가 더 빨랐다. :sweat_smile:</p>

<p>두 번째 시도했던 방법은 헤더를 <code class="language-plaintext highlighter-rouge">Recyclerview</code>의 첫번째 아이템으로 다루는 방법이다. 아이템이 첫번째라면 다른 아이템 타입을 적용시켜 관리하는 방법은 언뜻 보기에도 그렇게 끌리지가 않았다. 뭔가 깔끔하기 보다 억지로 우겨넣는(?) 방법인 것 같았다. 하지만, 해결도 제대로 안되면서 깔끔한 방식, 코드만 찾는 나의 습성때문에 피 본 날이 하루가 아니니 그래도 시도는 해보았다. 내가 제대로 신경을 못쓴 것이겠지만, 역시나 어플이 뻑이 가버렸다. 원인을 파악할 의지도 없었다. 도대체 왜 내가 생각하는 깔끔한 방법이 없는 것인지…항상 이렇다. :joy: 그러다 정말 우여곡절 끝에 우연히 딱 맘에 드는 방법을 찾아 이 글을 쓰게 되었다.</p>

<h2 id="제가-소개하는-방법">제가 소개하는 방법</h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;androidx.coordinatorlayout.widget.CoordinatorLayout</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;com.google.android.material.appbar.AppBarLayout</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">app:elevation=</span><span class="s">"0dp"</span><span class="nt">&gt;</span>

        <span class="nt">&lt;RelativeLayout</span>
            <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
            <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
            <span class="na">android:background=</span><span class="s">"@color/white"</span>
            <span class="na">app:layout_scrollFlags=</span><span class="s">"scroll|enterAlwaysCollapsed"</span><span class="nt">&gt;</span>

            <span class="nt">&lt;ImageView</span>
                <span class="na">android:id=</span><span class="s">"@+id/banner"</span>
                <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
                <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
                <span class="na">android:adjustViewBounds=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/RelativeLayout&gt;</span>

    <span class="nt">&lt;/com.google.android.material.appbar.AppBarLayout&gt;</span>

    <span class="nt">&lt;androidx.recyclerview.widget.RecyclerView</span>
        <span class="na">android:id=</span><span class="s">"@+id/recyclerview"</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">app:layout_behavior=</span><span class="s">"@string/appbar_scrolling_view_behavior"</span>
        <span class="na">android:overScrollMode=</span><span class="s">"never"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;/androidx.recyclerview.widget.RecyclerView&gt;</span>
<span class="nt">&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">CoordinatorLayout</code>의 <code class="language-plaintext highlighter-rouge">AppBarLayout</code>을 이용하여 본래 <code class="language-plaintext highlighter-rouge">AppBar</code>(상단 툴바라고 생각하면 편함.)로 쓰여질 공간에 Header 컨텐츠를 넣는 것이다. 따라서 <code class="language-plaintext highlighter-rouge">AppBar</code>로서의 이질감을 없애기 위해 <code class="language-plaintext highlighter-rouge">elevation</code>을 <code class="language-plaintext highlighter-rouge">0dp</code>로 주었다. 위와 같이 <code class="language-plaintext highlighter-rouge">AppBar</code>안의 <code class="language-plaintext highlighter-rouge">Layout</code>에 <code class="language-plaintext highlighter-rouge">app:layout_scrollFlags="scroll"</code>과 <code class="language-plaintext highlighter-rouge">Recyclerview</code>에 <code class="language-plaintext highlighter-rouge">app:layout_behavior="@string/appbar_scrolling_view_behavior"</code>을 해주면 이들은 마치 하나같이 <code class="language-plaintext highlighter-rouge">scroll</code>을 가능케 한다. 추가적으로 <code class="language-plaintext highlighter-rouge">app:layout_scrollFlags</code>에는 <code class="language-plaintext highlighter-rouge">"enterAlways", "enterAlwaysCollapsed", "exitUntilCollapsed"</code> 기능이 있는데 이는 <code class="language-plaintext highlighter-rouge">scroll</code>시 <code class="language-plaintext highlighter-rouge">AppBar</code>가 노출되는 양상을 각기 다르게 나타나기에 취향껏 골라보자. 더불어, <code class="language-plaintext highlighter-rouge">RecyclerView</code>특유의 <code class="language-plaintext highlighter-rouge">scroll</code>시 그림자가 생겨서 <code class="language-plaintext highlighter-rouge">AppBar</code>와의 이질감을 형성하기 때문에 <code class="language-plaintext highlighter-rouge">android:overScrollMode="never"</code>까지 설정해주면 좋다. :smile:</p>
:ET