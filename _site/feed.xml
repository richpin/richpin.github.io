<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-12-12T19:43:37+09:00</updated><id>/feed.xml</id><title type="html">초보 개발자, 몽상가의 블로그</title><subtitle>초보 개발자, 몽상가의 블로그</subtitle><author><name>유영석</name><email>richpinkr99@gmail.com</email></author><entry><title type="html">[Android] Recyclerview에 Header를 달기</title><link href="/recyclerview-header-post/" rel="alternate" type="text/html" title="[Android] Recyclerview에 Header를 달기" /><published>2021-12-12T00:00:00+09:00</published><updated>2021-12-12T00:00:00+09:00</updated><id>/recyclerview-header-post</id><content type="html" xml:base="/recyclerview-header-post/">&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recyclerview&lt;/code&gt;를 다루다 보면 가장 위에 다른 형태의 컨텐츠를 달아야 할 때가 있을 것이다. 내가 말하고자 하는 것은 항상 고정되어 있는 형태가 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recyclerview&lt;/code&gt;와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scroll&lt;/code&gt;이 가능한 즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Header&lt;/code&gt;를 다는 것이다. 나의 경우에는 SNS처럼 커뮤니티 기능을 만드는 도중 가장 위에 마치 게시판같이 환영 멘트, 새로운 정보, 광고 등의 정보를 달 공간이 필요했다. 그리고 내가 원하는 것은 고정되어 있는 것이 아닌 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recyclerview&lt;/code&gt;와 같이 스크롤이 되는 관계이기를 원했다.&lt;/p&gt;

&lt;h2 id=&quot;무슨-방법들이-있을까&quot;&gt;무슨 방법들이 있을까?&lt;/h2&gt;

&lt;p&gt;이와 같은 문제를 구글링 해보면 가장 흔하게 접하는 것이 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nested Scroll View&lt;/code&gt;를 이용하라는 것이다. 여러 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Layout&lt;/code&gt;들을 묶어 마치 하나처럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scroll&lt;/code&gt; 되는 이 방법을 나도 처음 써보았다. 동작 자체는 원하는 대로 되었지만, 성능의 문제가 발생했다. 아무래도 커뮤니티인만큼 굉장히 동적으로 동작하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recyclerview&lt;/code&gt;라서 그런지 전에 없었던 버벅임이 도저히 감당할 수 없을 정도로 심했다. 이해가 가지 않어 원인을 찾아보려 애썼지만 결국 포기가 더 빨랐다. :sweat_smile:&lt;/p&gt;

&lt;p&gt;두 번째 시도했던 방법은 헤더를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recyclerview&lt;/code&gt;의 첫번째 아이템으로 다루는 방법이다. 아이템이 첫번째라면 다른 아이템 타입을 적용시켜 관리하는 방법은 언뜻 보기에도 그렇게 끌리지가 않았다. 뭔가 깔끔하기 보다 억지로 우겨넣는(?) 방법인 것 같았다. 하지만, 해결도 제대로 안되면서 깔끔한 방식, 코드만 찾는 나의 습성때문에 피 본 날이 하루가 아니니 그래도 시도는 해보았다. 내가 제대로 신경을 못쓴 것이겠지만, 역시나 어플이 뻑이 가버렸다. 원인을 파악할 의지도 없었다. 도대체 왜 내가 생각하는 깔끔한 방법이 없는 것인지…항상 이렇다. :joy: 그러다 정말 우여곡절 끝에 우연히 딱 맘에 드는 방법을 찾아 이 글을 쓰게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;제가-소개하는-방법&quot;&gt;제가 소개하는 방법&lt;/h2&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;androidx.coordinatorlayout.widget.CoordinatorLayout&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;com.google.android.material.appbar.AppBarLayout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app:elevation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0dp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;RelativeLayout&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:background=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/white&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;app:layout_scrollFlags=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scroll|enterAlwaysCollapsed&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ImageView&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/banner&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;android:adjustViewBounds=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/com.google.android.material.appbar.AppBarLayout&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;androidx.recyclerview.widget.RecyclerView&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/recyclerview&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app:layout_behavior=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@string/appbar_scrolling_view_behavior&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:overScrollMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;never&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/androidx.recyclerview.widget.RecyclerView&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoordinatorLayout&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppBarLayout&lt;/code&gt;을 이용하여 본래 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppBar&lt;/code&gt;(상단 툴바라고 생각하면 편함.)로 쓰여질 공간에 Header 컨텐츠를 넣는 것이다. 따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppBar&lt;/code&gt;로서의 이질감을 없애기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elevation&lt;/code&gt;을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0dp&lt;/code&gt;로 주었다. 위와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppBar&lt;/code&gt;안의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Layout&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app:layout_scrollFlags=&quot;scroll&quot;&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Recyclerview&lt;/code&gt;에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&lt;/code&gt;을 해주면 이들은 마치 하나같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scroll&lt;/code&gt;을 가능케 한다. 추가적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app:layout_scrollFlags&lt;/code&gt;에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;enterAlways&quot;, &quot;enterAlwaysCollapsed&quot;, &quot;exitUntilCollapsed&quot;&lt;/code&gt; 기능이 있는데 이는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scroll&lt;/code&gt;시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppBar&lt;/code&gt;가 노출되는 양상을 각기 다르게 나타나기에 취향껏 골라보자. 더불어, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;특유의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scroll&lt;/code&gt;시 그림자가 생겨서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AppBar&lt;/code&gt;와의 이질감을 형성하기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:overScrollMode=&quot;never&quot;&lt;/code&gt;까지 설정해주면 좋다. :smile:&lt;/p&gt;</content><author><name>유영석</name><email>richpinkr99@gmail.com</email></author><summary type="html">가장 간단명료했던 방법</summary></entry><entry><title type="html">[Android] 더 나은 architecture을 위한 필수템, ViewModel</title><link href="/view-model-post/" rel="alternate" type="text/html" title="[Android] 더 나은 architecture을 위한 필수템, ViewModel" /><published>2021-09-29T00:00:00+09:00</published><updated>2021-09-29T00:00:00+09:00</updated><id>/view-model-post</id><content type="html" xml:base="/view-model-post/">&lt;p&gt;Android 개발자로 추후 진로를 결정할 생각은 없지만, 어찌다 보니 지금 하고 있는 프로젝트가 안드로이드 어플리케이션이네요. &lt;del&gt;(그래도 아직은 생각 없습니다)&lt;/del&gt;
나름 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Playstore&lt;/code&gt;에도 올려서 서비스를 진행할 어플리케이션이라 안정성을 신경써야 하기 때문에 &lt;strong&gt;ViewModel&lt;/strong&gt; 이란 개념을 도입해서 개발하기로 했습니다.&lt;/p&gt;

&lt;p&gt;새로운 개념이니만큼 이해하기 &lt;strong&gt;쉽게&lt;/strong&gt; 그리고 개발을 위해 최소한으로 필요한 만큼만 설명을 하는 방향으로 잡겠습니다.:smile:&lt;/p&gt;

&lt;h2 id=&quot;mvvm이란&quot;&gt;MVVM이란?&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;을 알기 전 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;이란 개념을 알아야하는데, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;이 여기서 파생되었기 때문입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/MVVM_handmade.png&quot; alt=&quot;MVVMPattern&quot; /&gt;
&lt;del&gt;(발그림 죄송합니다ㅎㅎ)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MVVM(Model-View-ViewModel)&lt;/strong&gt; 패턴은 하나의  코드에서 사용자에게 보여지는 GUI 부분, 즉 &lt;strong&gt;View&lt;/strong&gt; 를 비즈니스 로직(모델)로부터 분리하여 독립적인 역할로써 존재하게 하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Software Architecture&lt;/code&gt; 패턴입니다. 쉽게 말해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUI&lt;/code&gt;와 관련된 코드들을 관련없는 다른 코드들과 분리시켜서 &lt;strong&gt;독립적&lt;/strong&gt; 으로 존재하게 하고 싶다는 겁니다.
기술이 발전할수록 개발되는 프로그램들은 점점 거대하져 가기에 기능에 있어 역할들을 세분하여 독립적이게 하는 것도 점점 중요한 주제가 되어가고 있죠? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;은 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;에 있어 그런 니즈를 충족시키위해 태어났다고 보시면 됩니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;에서는 사용자가 스크린에서 보이는 &lt;strong&gt;UI&lt;/strong&gt; 적인 요소만 독립적으로 정의합니다. 오직 어떻게 보일지에 대한 것만 구현한다는 뜻이죠. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;의 변화에 맞춰 사용자에게 보이는 부분에도 변화를 주는 것이지요.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;에서는 해당 프로그램에서 사용할 &lt;strong&gt;Data&lt;/strong&gt; 와 그 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt;에 대한 처리들을 정의합니다. 네트워크 통신과 관련되어 있는 부분이라 생각하면 편할겁니다. 서버와 커뮤니케이션 하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;들을 보내고 가져오고 계산하는 등의 과정을 &lt;strong&gt;독립적&lt;/strong&gt; 으로 맞게 되는 것입니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;에서는 위의 그림과 마찬가지로 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;의 &lt;strong&gt;다리&lt;/strong&gt; 가 되어준다고 생각하면 됩니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;과 커뮤니케이션하여 데이터들을 가져와 이를 알맞게 가공하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;가 오직 이 데이터들을 &lt;strong&gt;표현&lt;/strong&gt; 하는데에만 집중할 수 있도록 조력자 역할을 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 분리해 놓으면 작업이 병렬적으로 진행될 수 있게 되어 테스트와 유지 및 보수 등이 한결 효율적이게 진행되므로 전체적인 안정성에 크게 기여하게 되는 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;android의-viewmodel&quot;&gt;Android의 ViewModel&lt;/h2&gt;

&lt;p&gt;Android에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;는 UI 컨트롤러라고 부릅니다. 저희가 이미 아는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fragment&lt;/code&gt;가 이 UI 컨트롤러에 포함되는 것이죠. 앞선 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;의 장점과 더불어 Android내에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;은 추가적으로 한 가지의 장점을 더 가지게 되는데 바로 &lt;strong&gt;Life cycle(생명주기)&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;p&gt;UI 컨트롤러(View)에서 관련 데이터를 저장하고 있게 되면 당연하게도 해당 UI 컨트롤러가 제거될 때 관련 데이터 또한 제거되게 되겠죠?? 이렇게 되면 UI 컨트롤러가 재생성 되게 될 때 관련 데이터 또한 다시 불러와야 하는 비효율적 문제가 생기게 됩니다. 대표적인 예시가 회전인데 Android에서 화면을 회전하게 될 때 UI 컨트롤러가 삭제 후 재생성이 되는데 사용하는 관점에서는 화면만 달라지는 것이 전부여야 하지만 UI가 재생성 되면서 데이터들까지 달라지는 참사가 생기게 되는 것이죠. (기존에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundle&lt;/code&gt;을 사용해서 해결했지만, 이제는 성능의 한계에 부딪히게 되버렸다고 합니다.:sweat_smile:)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/viewmodel-lifecycle.png&quot; alt=&quot;viewmodel-lifecycle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이와 같이 UI 컨트롤러와 상관없이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;이 UI 컨트롤러의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LifeCycle&lt;/code&gt;을 모두 포함하는 독립적인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Life Cycle&lt;/code&gt;을 갖게 되면서 UI 컨트롤러의 변동에도 데이터는 유지할 수 있게 되는 가장 큰 장점이 생기게 됩니다. 스마트폰의 성능이 향상되고 사용자의 활용이 복잡해지면서(어플리케이션 실행 중에 이것 저것 다른 활동을 하는 경우) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;은 선택이 아닌 필수가 되었다고 할 수 있겠죠???:woozy_face:&lt;/p&gt;

&lt;p&gt;Android에서 구현되는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MVVM&lt;/code&gt; 패턴은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/final-architecture.png&quot; alt=&quot;final-architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MVVM&lt;/code&gt; 개념에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity/Fragment&lt;/code&gt;가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View&lt;/code&gt;임은 위에서 설명했고, 추가적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt;가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;이 되는 것입니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt;에서 또 데이터 베이스와 웹 서비스 관련 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;들과 소통이 이루어짐을 보여줍니다. 위에서 생소한 것이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;일 것일 텐데요.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LiveData&lt;/strong&gt; 는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;에서 데이터를 담고 있게 해주는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Holder&lt;/code&gt; 클래스입니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;는 UI 컨트롤러가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt;의 변경을 &lt;strong&gt;관찰(모니터링)&lt;/strong&gt; 할 수 있는 클래스입니다. 따라서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;이 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;라는 것을 통해 UI 컨트롤러에게 ‘야! 데이터 바뀌었어! 일해!!!”라고 해주는 것이지요. LiveData가 다른 클래스와 다른 가장 큰 특징은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LifeCycle&lt;/code&gt;을 인식한다는 점입니다. UI 컨트롤러의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LifeCycle&lt;/code&gt;에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Active&lt;/code&gt;한 상태에서만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;과 커뮤니케이션하여 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data&lt;/code&gt;를 업데이트함으로써 동기화, 메모리, 비정상 종료, 자동화 등의 많은 측면에서 엄청난 장점을 가지게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;android에서-viewmodelmvvm-구현&quot;&gt;Android에서 ViewModel(MVVM) 구현&lt;/h2&gt;

&lt;p&gt;제가 찾기로 한국 블로그에 설명은 많은데 코드를 보여주며 설명해주는 곳이 많지 않았습니다. 그래서 저와 함께 간단히 살펴볼텐데요. 외국 블로그에서 여러 능력자분들이 쓰신 여러가지 방식의 코드들이 있습니다만, &lt;strong&gt;저는 제가 직접 프로젝트에 사용하였던 방식으로 예시를 들어보겠습니다.(따라서 다소 코드에 편향성이 있을 수 있으니 하나의 예시 그 이하로만 생각해주셨으면 합니다.)&lt;/strong&gt; 이 때 배웠단 간간한 다른 지식들까지 말씀드릴테니 천천히 따라와 보시죠! 간단하게 사용자 정보를 다루는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;을 구현해보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;가장 먼저, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt; 작성을 해봅시다. 사용자 정보에 대한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;이니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;이름을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserViewModel&lt;/code&gt;이라 칭하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableLiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;사용자 정보를 담은 User라는 데이터 클래스를 담은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;로 감싸고 있는 모습입니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrayList&amp;lt;User&amp;gt;&lt;/code&gt;대신 어떤 타입이든 사용자가 필요한 자료형을 그때그때 넣어서 감싸주시면 됩니다.&lt;/p&gt;

&lt;p&gt;이제 함수를 사용자 정보를 가져오는 함수를 만들어볼까요. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt;에 데이터 베이스로부터 사용자 정보를 가져오는 코드를 작성합니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Repository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callbackFlow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;trySend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;갑자기 &lt;strong&gt;callbackFlow&lt;/strong&gt; 가 뭐냐 하실수도 있는 저와같은 분이 계실겁니다. 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getUsers&lt;/code&gt;함수처럼 네트워크와 통신을 한다면 통신에 의한 시간이 걸리겠죠? 평소에는 괜찮다 하더라도 만약 이 시간이 내가 작성한 코드를 컴퓨터가 진행하는 속도보다 오래 걸린다면 문제가 생기는 것입니다. 이 통신은 코드 진행과는 별개로 &lt;del&gt;(정확한 표현은 아니지만…)&lt;/del&gt; 일어나고 있기 때문에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt;을 가져오기도 전에 프로그램은 이미 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt;을 가져온 이후의 코드들을 실행시키고 있는 것이지요. 그것을 막아주기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlin&lt;/code&gt;에서는 이와 같은 방식으로 좀 그때그때마다 기다려달라는 의사를 전달하고 있는 것입니다. user라는 사용자 정보를 가져오는 것이 끝났다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trySend&lt;/code&gt;로 데이터를 쏴줌으로써 이어서 진행하라는 의사까지 전달하는 것입니다. 이와 같은 방식을 &lt;strong&gt;callback&lt;/strong&gt; 이라고 하는데 더 알아보고 싶으신 분들은 정말 많은 좋은 글들과 자료들을 참고하여 공부하시면 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;자 이제 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserViewModel&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt;사이에 다리를 놓아주어야 할 것입니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt;에서 가져온 정보를 UI 컨트롤러에게 전달하는 함수를 작성해봅시다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableLiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModelScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;arrayListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loadUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;postValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getUsers&lt;/code&gt;가 하는 일은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repository&lt;/code&gt;의 미리 써놓은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadUsers&lt;/code&gt;를 통해서 사용자 정보를 가져와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;에 변화를 줌으로써 UI 컨트롤러 인식하게 하는 일 뿐입니다. 정말 다리 역할만 하는 것이죠. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadUsers&lt;/code&gt;옆의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect&lt;/code&gt; 구문은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trySend&lt;/code&gt;를 쏴준 데이터를 받아들이겠다는 것입니다. 람다형식으로 쏴준 데이터를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt;라는 이름으로 받아 처리를 해주고 있는 것이지요. 여기서 주의할 점은 &lt;strong&gt;LiveData는 값 자체가 바뀌는 것만을 변화로 취급한다는 것입니다.&lt;/strong&gt; 배열을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;로 감싸주었지만 배열의 요소가 추가되고 제거되고 등의 변화는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;는 감지하지 못한다는 것입니다. 배열의 값, 즉 감싸고 있는 배열의 주솟값 자체가(쉽게 말하면 새로운 배열이 들어와야) 변화를 감지한다는 것이지요. 아직 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlin&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;가 그 정도로 똑똑하지는 않으니 부디 저처럼 당연하게 믿고 썼다가 낭패를 보시지 않았으면 좋겠습니다. 그래서 저는 이와 같이 임시로 새로운 배열을 만들어 그곳에 들어오는 사용자 정보들을 다 저장한 뒤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postValue&lt;/code&gt;로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;의 값을 바꿔준 것입니다.&lt;/p&gt;

&lt;p&gt;여기서 또 아까 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callbackFlow&lt;/code&gt;마냥 써있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewModelScope.launch&lt;/code&gt;는 무엇일까요. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getUsers&lt;/code&gt; 안에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callback&lt;/code&gt;함수로 쓴 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loadUsers&lt;/code&gt;가 있죠? 방금 설명들였듯이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt;할 때까지 기다린다는 뜻입니다. 그런데 말입니다~ 기다리는 건 좋은데 그 때 마냥 멈춰있기에는 너무 비효율적이지 않나요? 그래서 우리는 이 친구를 뒤쪽에 둔 채 계속 나아가야할 코드들은 진행을 계속합니다. 다른 &lt;strong&gt;Thread&lt;/strong&gt; 에서 진행되게끔 해서 &lt;strong&gt;Main Thread&lt;/strong&gt; 에는 멈춤을 주지 않는 이 방식을 &lt;strong&gt;비동기 처리&lt;/strong&gt; 라고 합니다. 굉장히 중요한 개념이니 이 또한 무조건 공부하셔야 하는 내용입니다. 저는 이렇게 쉽게 이해의 포문을 열어드렸고 마찬가지로 굉장히 많은 좋은 글들과 자료들로 관심있게 찾아봅시다. 어쨌든 결론적으로 이 비동기 처리를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlin&lt;/code&gt;에서는 &lt;strong&gt;coroutine&lt;/strong&gt; 이라는 이름으로 제공을 하는 것이고 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coroutine&lt;/code&gt;을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;의 상태에 따라(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;이 중지되면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coroutine&lt;/code&gt;도 중지되게끔 등등..) 진행을 하게끔 해주는 것이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewModelScope&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch&lt;/code&gt;메소드 랍니다.&lt;/p&gt;

&lt;p&gt;이제 UI 컨트롤러로를 작성하여 봅시다. UI 컨트롤러 내에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;과의 소통을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt; 변수를 생성하여 줍니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lateinit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserViewModel&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModelProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserViewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 UI 컨트롤러 내에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;의 변화를 감지하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;observe&lt;/code&gt;를 해줍시다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onViewCreated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Observer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(추가적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fragment&lt;/code&gt;라면 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fragmen&lt;/code&gt;t의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lifecycle&lt;/code&gt;을 따라갈 수 있도록 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;대신 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewLifecycleOwner&lt;/code&gt;을 넣어주셔야 합니다. ) 이렇게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;안에 담긴 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; 배열에 변화가 생겼을 때 이 값을 람다 형식을 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt;로 받아 이를 이용해 UI를 다루는 코드를 작성하시면 된답니다.&lt;/p&gt;

&lt;p&gt;어땠나요? 천천히 따라오니 이제 Android에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;을 어떻게 적용할 지 흐름을 좀 느끼셨나요? 그랬다면 다행입니다. 저 역시 처음 봤을 때 많이 헷갈렸던 새로운 개념인지라, 저와 같은 분에게 조금이나마 도움이 되고자 글을 써보았습니다. 그래서 인지 너무 쉽게 설명했기에 조금 더 큰 이해를 위해서는 각종 글들과 자료로 충분히 공부도 해보시고 무엇보다 적용해보시면서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;을 완전정복 하셨으면 좋겠습니다! :grin:&lt;/p&gt;</content><author><name>유영석</name><email>richpinkr99@gmail.com</email></author><summary type="html">이제는 알아야 하는 ViewModel!!!</summary></entry><entry><title type="html">[Android] 원하는 이미지를 다양한 픽셀에 맞도록 android resource로 추가하는 법</title><link href="/android-density-resource-post/" rel="alternate" type="text/html" title="[Android] 원하는 이미지를 다양한 픽셀에 맞도록 android resource로 추가하는 법" /><published>2021-09-24T00:00:00+09:00</published><updated>2021-09-24T00:00:00+09:00</updated><id>/android-density-resource-post</id><content type="html" xml:base="/android-density-resource-post/">&lt;p&gt;안드로이드 어플리케이션을 만드는 도중 초반 작업인 &lt;strong&gt;Splash&lt;/strong&gt; 화면을 만들고 있었습니다.&lt;/p&gt;

&lt;h2 id=&quot;안드로이드-splash-화면-만들기&quot;&gt;안드로이드 Splash 화면 만들기&lt;/h2&gt;

&lt;p&gt;어플이 실행되기 전에 로딩 화면과도 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splash&lt;/code&gt;는 대부분의 상용 어플들에 적용이 되어 있습니다. 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splash&lt;/code&gt; 화면을 만들기 위해 많은 방법들이 있습니다. 대표적으로 사용되는 것이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splash Activity&lt;/code&gt; 방법인데 이는 간단히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main Activity&lt;/code&gt;가 실행되기 전, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splash Activity&lt;/code&gt;를 띄우는 방법입니다. 허나 단순히 팝업 이미지를 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity&lt;/code&gt;를 소모하는 것은 자원 낭비가 심하다 판단해 요즘은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Theme&lt;/code&gt; 방법을 쓰는 것 같습니다. 물론 저는 이 방법으로 했습니다. (만약 애니메이션 형식의 Splash를 원한다면 &lt;a href=&quot;https://developer.android.com/about/versions/12/features/splash-screen&quot;&gt;여기&lt;/a&gt;를 참조하도록)&lt;/p&gt;

&lt;p&gt;방법은 간단합니다. 먼저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawable - New - Drawable Resource File&lt;/code&gt;을 들어가 새로운 splash용 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml 파일&lt;/code&gt;을 생성하여 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/splash_create.png&quot; alt=&quot;splash_create&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만들어 졌다면 해당 xml 파일로 들어가 아래와 같은 코드를 넣어줍니다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;layer-list&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:drawable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@android:color/white&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;bitmap&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/app_logo&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:gravity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/layer-list&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:drawable&lt;/code&gt;에는 넣고 싶은 배경색을 넣어주면 되고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:src&lt;/code&gt;에는 넣고 싶은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splash&lt;/code&gt; 이미지를 넣어주면 됩니다.
그 후에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Theme&lt;/code&gt;을 새로 만든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SplashTheme&lt;/code&gt;으로 지정하여 줍니다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:exported=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:theme=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/SplashTheme&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity.kt&lt;/code&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt;의 경우엔 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity.java&lt;/code&gt;)의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate&lt;/code&gt;에서 가장 먼저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Theme&lt;/code&gt;을 기존 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Theme&lt;/code&gt;으로 교체 해줍니다. 다소 야매같은 방법이지만 비효율적인 낭비 없이 깔끔하게 할 수 있는 방법인 것 같습니다.:relieved:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Theme_Nutrihanjum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;이미지를-다양한-픽셀에-맞도록-android-resource로-추가하기&quot;&gt;이미지를 다양한 픽셀에 맞도록 android resource로 추가하기&lt;/h2&gt;

&lt;p&gt;여기서 문제는 원하는 이미지를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawable&lt;/code&gt;에 raw하게 넣어버리고 실행을 하면 얘 크기가 아주 들쭉날쭉이라는 것입다. 이는 픽셀 밀도 차이를 고려하지 않아서 그렇습니다. Android 기기는 다양한 화면 크기(핸드셋, 태블릿, TV 등)로 제공될 뿐만 아니라 화면의 픽셀 크기도 다양합니다. 즉, 한 기기에서는 제곱인치당 160픽셀을 사용하지만 다른 기기에서는 같은 공간에 480픽셀을 사용합니다. 이러한 픽셀 밀도의 편차를 고려하지 않으면 시스템이 이미지를 확장하거나(결과적으로 이미지가 흐려짐) 이미지가 완전히 잘못된 크기로 표시될 수 있는 것이죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/relative_size.png&quot; alt=&quot;relative_size&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이에 대해 더 명확한 내용은 잘 설명된 글들이 많으니 생략하겠습니다. &lt;strong&gt;(이미 다른 좋은 글들이 많은 주제는 굳이 건들지 않는 것이 내 블로그의 의의랍니다.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;따라서 이미지를 그냥 박는 것이 아니라 몇 가지의 과정이 필요하게 됩니다.&lt;/p&gt;

&lt;p&gt;먼저, &lt;a href=&quot;https://romannurik.github.io/AndroidAssetStudio/nine-patches.html#&amp;amp;sourceDensity=320&amp;amp;name=example&quot;&gt;Android Asset Studio - Simple nine-patch generator&lt;/a&gt;에 들어가서 넣고 싶은 이미지를 올립니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/asset_studio.png&quot; alt=&quot;asset_studio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런 다음 별도 과정 없이 바로 위에 표시해둔 저장 표시를 클릭하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt;파일이 다운되고 압축을 해제하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res&lt;/code&gt;라는 폴더 안에 픽셀 밀도에 맞는 각 이미지들이 정렬된 폴더들이 생성되어 있게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/studio_result.png&quot; alt=&quot;studio_result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파일 형식이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9.png&lt;/code&gt;로 되어있는 것은 이 이미지들이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9-patch image&lt;/code&gt; 형식이라 그렇다고만 알면 될 것 같습니다.&lt;/p&gt;

&lt;p&gt;이제 이 파일들을 또 그대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawable&lt;/code&gt;에 갖다 박는다면! 위와 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9-patch&lt;/code&gt; 이미지 특유의 테두리 선들이 남아있을 것이다…:flushed:&lt;/p&gt;

&lt;p&gt;따라서 우리는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resource Manager&lt;/code&gt;를 사용해야 합니다. 위치는 아래와 같습나다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/resource_manager.png&quot; width=&quot;500&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 후에 저 영역에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res&lt;/code&gt; 폴더 안 5개의 폴더를 드래그 하여 넣거나 &lt;strong&gt;+&lt;/strong&gt; 에서 ‘Import Drawables`를 클릭하여 res폴더를 지정해주면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/import_drawables.png&quot; alt=&quot;import_drawables&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파일 이름 지정해주고 설정들은 기호에 따라 맞춰준뒤 Next&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/import_finish.png&quot; alt=&quot;import_finish&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finish&lt;/code&gt;를 클릭해주면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/drawable_result.png&quot; width=&quot;500&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이와 같이 기똥차게 픽셀 밀도 별로 정리되어 있는 것을 볼 수 있습니다. 이제 맘 편히 리소스로 쓸 수 있는 상태가 되었네요. :grin:&lt;/p&gt;

&lt;p&gt;구글링을 해서 뒤져봐도 비슷한 부류의 얘기들 뿐, 내가 원했던 이 얘기를 하는 명확한 글을 찾지 못했습니다. 그래서 이렇게나 간단한 일인데도 애 좀 먹었답니다…:sweat_smile:&lt;/p&gt;</content><author><name>유영석</name><email>richpinkr99@gmail.com</email></author><summary type="html">9-patch 이미지를 사용하여 이미지 리소스 생성하기</summary></entry><entry><title type="html">[Jekyll] jekyll serve 명령 실행 시 crash-abort 이슈</title><link href="/crash-abort-post/" rel="alternate" type="text/html" title="[Jekyll] jekyll serve 명령 실행 시 crash-abort 이슈" /><published>2021-09-01T00:00:00+09:00</published><updated>2021-09-01T00:00:00+09:00</updated><id>/crash-abort-post</id><content type="html" xml:base="/crash-abort-post/">&lt;p&gt;이제는 저도 개발 블로그를 하나 해야겠다는 생각으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github Pages&lt;/code&gt;로 지금 이 블로그를 만들기 시작하던 중이었습니다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-테마를-다운받아-로컬-호스팅-해보기&quot;&gt;jekyll 테마를 다운받아 로컬 호스팅 해보기&lt;/h2&gt;

&lt;p&gt;많은 개발자들이 그러하듯 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; 테마를 이용하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homebrew&lt;/code&gt;로 버전 관리자인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 먼저 설치해주고&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install rbenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;로 가능한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;버전들을 확인해봅니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv install --list

2.6.8
2.7.4
3.0.2
jruby-9.2.19.0
mruby-3.0.0
rbx-5.0
truffleruby-21.2.0.1
truffleruby+graalvm-21.2.0

Only latest stable releases for each Ruby implementation are shown.
Use &apos;rbenv install --list-all / -L&apos; to show all local versions.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.0.2&lt;/code&gt;가 가장 최근이니 거침없이 다운합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv install 3.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; 패키지 관리 프레임워크인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RubyGems&lt;/code&gt;는 &lt;a href=&quot;https://rubygems.org/pages/download/&quot;&gt;공식 홈페이지&lt;/a&gt;에서 받고, 그 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem&lt;/code&gt;을 이용해서 사용하려는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bunlder&lt;/code&gt;를 설치합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;원하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; 테마를 다운받아야 했는데 저는 그냥 가장 무난하고 사용이 많은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minimal mistakes theme&lt;/code&gt;을 받았습니다. 다운받은 테마 디렉토리로 이동 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt;을 실행해줍니다. 정말 컴퓨터는 한 가지 하려면 너무 여러 가지를 시킨다. &lt;del&gt;(명령어 한 번에 다 쭈루룩 되면 안되나…)&lt;/del&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 로컬 호스팅을 하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serve&lt;/code&gt;명령어 실행!!!&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;잘되나 싶었지만……&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;497 /Library/Ruby/Gems/2.6.0/gems/sassc-2.4.0/lib/sassc/native/sass_input_style.rb
  498 /Library/Ruby/Gems/2.6.0/gems/sassc-2.4.0/lib/sassc/native/sass_output_style.rb
  499 /Library/Ruby/Gems/2.6.0/gems/sassc-2.4.0/lib/sassc/native/string_list.rb

[NOTE]
You may have encountered a bug in the Ruby interpreter or extension libraries.
Bug reports are welcome.
For details: https://www.ruby-lang.org/bugreport.html

[IMPORTANT]
Don&apos;t forget to include the Crash Report log file under
DiagnosticReports directory in bug reports.

zsh: abort      bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;어째 한 번에 착!하고 잘 될리가 없지…:flushed:&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Crash Report&lt;/code&gt;하더니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abort&lt;/code&gt;라.., 명령어가 씹혔다는 얘기네요…
해결방법을 찾아보려 열심히 구글링합니다.&lt;/p&gt;

&lt;h2 id=&quot;crash-report-후-abort-문제-해결해보기&quot;&gt;Crash Report 후 abort 문제 해결해보기&lt;/h2&gt;

&lt;p&gt;이것저것 해결해보았지만…방법이 보이지가 않았습니다.
열심히 나오는 명령어들 다 때려 넣어보았지만 언제나 그랬듯이 바로 해결되지 않네요.:sweat_smile:&lt;br /&gt;
이 문제를 다루고 있는 가장 최근 커뮤니티를 살피던 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apple m1&lt;/code&gt;의 이슈라는 내용들이 있었습니다. (정말 여러모로 아직은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m1&lt;/code&gt;으로 살아가기 걸림돌이 많은 것 같습니다…)&lt;/p&gt;

&lt;p&gt;어떤 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m1&lt;/code&gt; 유저분은 이제 업데이트 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3&lt;/code&gt;이후로는 해결됬기 때문에 이것저것 업데이트 업데이트를 해보면 된다고 했습니다. 물론 해봤는데 안되서 &lt;strong&gt;gem으로 현재 상태를 확인해보고 있었습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem env

RubyGems Environment:
  - RUBYGEMS VERSION: 3.2.26
  - RUBY VERSION: 2.6.3 (2019-04-16 patchlevel 62) [universal.arm64e-darwin20]
  - INSTALLATION DIRECTORY: /Library/Ruby/Gems/2.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;뭔가 이상한데? 직관적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RubyGems&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;의 버전 차이가 심함을 알았고 자세히 보니 2019년 버전??? 그러고 보니 아까 난 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.0.2&lt;/code&gt;버전을 다운받았는데???&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby -v
ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.arm64e-darwin20]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;정말 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.6.3&lt;/code&gt;이라는 뚱딴지 같은 버전으로 설정이 되어있었습니다.:rage:&lt;br /&gt;
바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;를 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.0.2&lt;/code&gt;로 버전 스위치에 들어갑니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv shell 3.0.2

rbenv: shell integration not enabled. Run `rbenv init&apos; for instructions.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;음…당황하지 않고, 써있는 대로 명령어를 실행해봅니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv init

# Load rbenv automatically by appending
# the following to ~/.zshrc:

eval &quot;$(rbenv init -)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;후…다시 한 번 당황하지 않고, 써있는 대로 실행&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ eval &quot;$(rbenv init -)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 다시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ rbenv shell 3.0.2&lt;/code&gt;을 실행하니 드디어 되었습니다. 그리고 빠르게 디폴트 버전으로 설정해줍니다. (나중에야 알았지만 이미 진즉애 이 명령어로 Ruby 버전이 바뀌어있었습니다…)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv global 3.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ bundle exec jekyll serve&lt;/code&gt; 실행해보니 잘됩니다!!! 적어도 내가 찾아봤을 때는 이런 경우에 관해 자세히 쓴 블로그는 못 봐서 이렇게 글을 쓰게 되었습니다. 따라서 혹시 이런 문제가 있다면&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;결론 : gem env로 버전 확인 먼저 해보세요&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
. &lt;br /&gt;
.&lt;/p&gt;
&lt;h2 id=&quot;또-다른-이슈&quot;&gt;또 다른 이슈&lt;/h2&gt;
&lt;p&gt;하…끝내고 싶었는데 또 후속 문제가 찾아왔습니다. 터미널을 끄고 다시 실행하면 또 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt; 버전이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.6.3&lt;/code&gt;이 되어있네요.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv global

3.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;global&lt;/code&gt; 버전은 문제 없는데????&lt;/p&gt;

&lt;p&gt;PATH가 잘못 들여져하고 확인해봤더니&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ env | grep PATH

PATH=/Users/yooyoungseok/.gem/ruby/2.6.0/bin:/Users/yooyoungseok/.gem/ruby/2.6.0/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin
MANPATH=/opt/homebrew/share/man::
INFOPATH=/opt/homebrew/share/info:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2.6.0??? 도대체 이게 왜 환경 변수에 왜 있는 거지?&lt;/p&gt;

&lt;p&gt;그 이후로도 이것저것 다 해보다가 결국 초심으로 돌아가서 Ruby 버전 관리에 대한 문서로 돌아갔습니다. 그러다 보니 하나 걸리는 게&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pre-installed macOS system Ruby&lt;/code&gt;&lt;br /&gt;
MAC OS에서는 기본적으로 시스템에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;가 있다고 하네요…
버전은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.6.3&lt;/code&gt;이랍니다. 이마를 탁! 쳤습니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ which ruby

/usr/bin/ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 보인다면 이미 깔려있는 거…문서에서는 그냥 무시하고 다른 버전 관리 시스템&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(asdf, chruby, rbenv, or rvm)&lt;/code&gt;들을 이용해서 사용하면 된다는 데 이것이 환경 변수에 영향을 끼쳐서 터미널을 새로 만들 시 계속해서 영향을 주고 있는 가 봅니다. MAC 사용자인 이상 안고갈 수 밖에 없는 가 보네요…:sob:&lt;/p&gt;

&lt;p&gt;그래서 저같은 경우는 그나마 편하게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;안에&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;
eval &quot;$(rbenv init -)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;적어놓고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serve&lt;/code&gt; 해야될 시에&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;해주기로 타협 봤답니다.&lt;/p&gt;</content><author><name>유영석</name><email>richpinkr99@gmail.com</email></author><summary type="html">jekyll serve 명령 실행이 bug report에 대한 내용과 함께 abort 될 때</summary></entry></feed>