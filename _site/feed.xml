<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-09-25T02:43:32+09:00</updated><id>/feed.xml</id><title type="html">초보 개발자, 몽상가의 블로그</title><subtitle>초보 개발자, 몽상가의 블로그</subtitle><author><name>유영석</name><email>richpinkr99@gmail.com</email></author><entry><title type="html">[Android] 원하는 이미지를 다양한 픽셀에 맞도록 android resource로 추가하는 법</title><link href="/android-density-resource-post/" rel="alternate" type="text/html" title="[Android] 원하는 이미지를 다양한 픽셀에 맞도록 android resource로 추가하는 법" /><published>2021-09-24T00:00:00+09:00</published><updated>2021-09-24T00:00:00+09:00</updated><id>/android-density-resource-post</id><content type="html" xml:base="/android-density-resource-post/">&lt;p&gt;안드로이드 어플리케이션을 만드는 도중 초반 작업인 &lt;strong&gt;Splash&lt;/strong&gt; 화면을 만들고 있었다.&lt;/p&gt;

&lt;h2 id=&quot;안드로이드-splash-화면-만들기&quot;&gt;안드로이드 Splash 화면 만들기&lt;/h2&gt;

&lt;p&gt;어플이 실행되기 전에 로딩 화면과도 같은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splash&lt;/code&gt;는 대부분의 어플에 적용이 되어 있다. 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splash&lt;/code&gt; 화면을 만들기 위해 많은 방법들이 있다. 대표적으로 사용되는 것이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splash Activity&lt;/code&gt; 방법인데 이는 간단히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main Activity&lt;/code&gt;가 실행되기 전, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Splash Activity&lt;/code&gt;를 띄우는 방법이다. 허나 단순히 팝업 이미지를 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity&lt;/code&gt;를 소모하는 것은 자원 낭비가 심하다 판단해 요즘은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Theme&lt;/code&gt; 방법을 쓰는 것 같다. 물론 나는 이 방법으로 했다. (만약 애니메이션 형식의 Splash를 원한다면 &lt;a href=&quot;https://developer.android.com/about/versions/12/features/splash-screen&quot;&gt;여기&lt;/a&gt;를 참조하도록)&lt;/p&gt;

&lt;p&gt;방법은 간단하다. 먼저 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawable - New - Drawable Resource File&lt;/code&gt;을 들어가 새로운 splash용 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml 파일&lt;/code&gt;을 생성하여 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/splash_create.png&quot; alt=&quot;splash_create&quot; /&gt;&lt;/p&gt;

&lt;p&gt;만들어 졌다면 해당 xml 파일로 들어가 아래와 같은 코드를 넣어준다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;layer-list&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:drawable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@android:color/white&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;bitmap&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/app_logo&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;android:gravity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/layer-list&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:drawable&lt;/code&gt;에는 넣고 싶은 배경색을 넣어주면 되고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:src&lt;/code&gt;에는 넣고 싶은 Splash 이미지를 넣어주면 된다.
그 후에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity&lt;/code&gt;의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Theme&lt;/code&gt;을 새로 만든 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SplashTheme&lt;/code&gt;으로 지정하여 준다.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;activity&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:exported=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:theme=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@style/SplashTheme&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity.kt&lt;/code&gt;(Java의 경우엔 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainActivity.java&lt;/code&gt;)의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate&lt;/code&gt;에서 가장 먼저 Theme을 기존 MainActivity의 Theme으로 교체를 해준다. 다소 야매같은 방법이지만 비효율적인 낭비 없이 깔끔하게 할 수 있는 방법인 것 같다.:relieved:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Theme_Nutrihanjum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;이미지를-다양한-픽셀에-맞도록-android-resource로-추가하기&quot;&gt;이미지를 다양한 픽셀에 맞도록 android resource로 추가하기&lt;/h2&gt;

&lt;p&gt;여기서 문제는 원하는 이미지를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawable&lt;/code&gt;에 raw하게 넣어버리고 실행을 하면 얘 크기가 아주 들쭉날쭉이라는 것이다. 이는 픽셀 밀도 차이를 고려하지 않은 당연한 결과이다. Android 기기는 다양한 화면 크기(핸드셋, 태블릿, TV 등)로 제공될 뿐만 아니라 화면의 픽셀 크기도 다양하다. 즉, 한 기기에서는 제곱인치당 160픽셀을 사용하지만 다른 기기에서는 같은 공간에 480픽셀을 사용합니다. 이러한 픽셀 밀도의 편차를 고려하지 않으면 시스템이 이미지를 확장하거나(결과적으로 이미지가 흐려짐) 이미지가 완전히 잘못된 크기로 표시될 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/relative_size.png&quot; alt=&quot;relative_size&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이에 대해 더 명확한 내용은 잘 설명된 글들이 많으니 생략하겠다. &lt;strong&gt;(이미 다른 좋은 글들이 많은 주제는 굳이 건들지 않는 것이 내 블로그의 의의다.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;따라서 이미지를 그냥 박는 것이 아니라 몇 가지의 과정이 필요하다.&lt;/p&gt;

&lt;p&gt;먼저, &lt;a href=&quot;https://romannurik.github.io/AndroidAssetStudio/nine-patches.html#&amp;amp;sourceDensity=320&amp;amp;name=example&quot;&gt;Android Asset Studio - Simple nine-patch generator&lt;/a&gt;에 들어간다. 넣고 싶은 이미지를 올린다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/asset_studio.png&quot; alt=&quot;asset_studio&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런 다음 별도 과정 없이 바로 위에 표시해둔 저장 표시를 클릭하면 zip파일이 다운되고 압축을 해제하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;res&lt;/code&gt;라는 폴더 안에 픽셀 밀도에 맞는 각 이미지들이 정렬된 폴더들이 생성되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/studio_result.png&quot; alt=&quot;studio_result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파일 형식이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9.png&lt;/code&gt;로 되어있는 것은 이 이미지들이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9-patch image&lt;/code&gt; 형식이라 그렇다고만 알면 된다.&lt;/p&gt;

&lt;p&gt;이제 이 파일들을 또 그대로 drawable에 갖다 박으면 위와 같이 9-patch 이미지 특유의 테두리 선들이 남아있을 것이다…:flushed:&lt;/p&gt;

&lt;p&gt;따라서 우리는 Resource Manager를 사용해야 한다. 위치는 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/resource_manager.png&quot; width=&quot;500&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 후에 저 영역에 res 폴더 안 5개의 폴더를 드래그 하여 넣거나 &lt;strong&gt;+&lt;/strong&gt; 에서 ‘Import Drawables`를 클릭하여 res폴더를 지정해주면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/import_drawables.png&quot; alt=&quot;import_drawables&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파일 이름 지정해주고 설정들은 기호에 따라 맞춰준뒤 Next&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/import_finish.png&quot; alt=&quot;import_finish&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 finish를 클릭해주면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/drawable_result.png&quot; width=&quot;500&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이와 같이 기똥차게 픽셀 밀도 별로 정리되어 있는 것을 볼 수 있다. 이제 맘 편히 리소스로 쓸 수 있는 상태가 되었다. :grin:&lt;/p&gt;

&lt;p&gt;구글링을 해서 뒤져봐도 비슷한 부류의 얘기들 뿐, 내가 원했던 이 얘기를 하는 명확한 글을 찾지 못했다. 그래서 이렇게나 간단한 일인데도 애 좀 먹었다…:sweat_smile:&lt;/p&gt;</content><author><name>유영석</name><email>richpinkr99@gmail.com</email></author><summary type="html">9-patch 이미지를 사용하여 이미지 리소스 생성하기</summary></entry><entry><title type="html">[Jekyll] jekyll serve 명령 실행 시 crash-abort 이슈</title><link href="/crash-abort-post/" rel="alternate" type="text/html" title="[Jekyll] jekyll serve 명령 실행 시 crash-abort 이슈" /><published>2021-09-01T00:00:00+09:00</published><updated>2021-09-01T00:00:00+09:00</updated><id>/crash-abort-post</id><content type="html" xml:base="/crash-abort-post/">&lt;p&gt;이제는 나도 개발 블로그를 하나 해야겠다는 생각으로 Github Pages로 지금 이 블로그를 만들기 시작하던 중이었다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-테마를-다운받아-로컬-호스팅-해보기&quot;&gt;jekyll 테마를 다운받아 로컬 호스팅 해보기&lt;/h2&gt;

&lt;p&gt;많은 개발자들이 그러하듯 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; 테마를 이용하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homebrew&lt;/code&gt;로 버전 관리자인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt; 먼저 설치해주고&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ brew install rbenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;rbenv로 가능한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ruby&lt;/code&gt;버전들을 확인해본다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv install --list

2.6.8
2.7.4
3.0.2
jruby-9.2.19.0
mruby-3.0.0
rbx-5.0
truffleruby-21.2.0.1
truffleruby+graalvm-21.2.0

Only latest stable releases for each Ruby implementation are shown.
Use &apos;rbenv install --list-all / -L&apos; to show all local versions.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;3.0.2가 가장 최근이니 거침없이 다운했다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv install 3.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ruby 패키지 관리 프레임워크인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RubyGems&lt;/code&gt;는 &lt;a href=&quot;https://rubygems.org/pages/download/&quot;&gt;공식 홈페이지&lt;/a&gt;에서 받고, 그 gem을 이용해서 사용하려는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bunlder&lt;/code&gt;를 설치한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;원하는 jekyll 테마를 다운받아야 했는데 나는 그냥 가장 무난하고 사용이 많은 &lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;minimal mistakes theme&lt;/a&gt;을 받았다. 다운받은 테마 디렉토리로 이동 후 bundle을 실행해준다. 정말 컴퓨터는 한 가지 하려면 너무 여러 가지를 시킨다. &lt;del&gt;(명령어 한 번에 다 쭈루룩 되면 안되나…)&lt;/del&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 로컬 호스팅을 하기 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serve&lt;/code&gt;명령어 실행!!!&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;잘되나 싶었지만……&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;497 /Library/Ruby/Gems/2.6.0/gems/sassc-2.4.0/lib/sassc/native/sass_input_style.rb
  498 /Library/Ruby/Gems/2.6.0/gems/sassc-2.4.0/lib/sassc/native/sass_output_style.rb
  499 /Library/Ruby/Gems/2.6.0/gems/sassc-2.4.0/lib/sassc/native/string_list.rb

[NOTE]
You may have encountered a bug in the Ruby interpreter or extension libraries.
Bug reports are welcome.
For details: https://www.ruby-lang.org/bugreport.html

[IMPORTANT]
Don&apos;t forget to include the Crash Report log file under
DiagnosticReports directory in bug reports.

zsh: abort      bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;어째 한 번에 착!하고 잘 될리가 없지…:flushed:&lt;br /&gt;
Crash Report하더니 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abort&lt;/code&gt;라.., 명령어가 씹혔다는 얘기다…
해결방법을 찾아보려 열심히 구글링했다.&lt;/p&gt;

&lt;h2 id=&quot;crash-report-후-abort-문제-해결해보기&quot;&gt;Crash Report 후 abort 문제 해결해보기&lt;/h2&gt;

&lt;p&gt;이것저것 해결해보았지만…방법이 보이지가 않았다.
언제나 그랬듯이 열심히 나오는 명령이들 다 때려 넣어보았지만 언제나 그랬듯이 바로 해결되지 않는다.:sweat_smile:&lt;br /&gt;
이 문제를 다루고 있는 가장 최근 커뮤니티를 살피던 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apple m1&lt;/code&gt;의 이슈라는 내용들이 있었다. (정말 여러모로 아직은 m1으로 살아가기 걸림돌이 많은 것 같다…)&lt;/p&gt;

&lt;p&gt;어떤 m1 유저분은 이제 업데이트 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3&lt;/code&gt;이후로는 해결됬기 때문에 이것저것 업데이트 업데이트를 해보면 된다했다. 물론 해봤는데 안되서 &lt;strong&gt;gem으로 현재 상태를 확인해보고 있던 중이었다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem env

RubyGems Environment:
  - RUBYGEMS VERSION: 3.2.26
  - RUBY VERSION: 2.6.3 (2019-04-16 patchlevel 62) [universal.arm64e-darwin20]
  - INSTALLATION DIRECTORY: /Library/Ruby/Gems/2.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;뭔가 이상한데? 직관적으로 RubyGems와 Ruby의 버전 차이가 심함을 알았고 자세히 보니 2019년 버전??? 그러고 보니 아까 난 3.0.2버전을 다운받았는데???&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby -v
ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.arm64e-darwin20]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;정말 2.6.3이라는 뚱딴지 같은 버전으로 설정이 되어있었다.:rage:&lt;br /&gt;
바로 rbenv를 통해 3.0.2로 버전 스위치에 들어갔다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv shell 3.0.2

rbenv: shell integration not enabled. Run `rbenv init&apos; for instructions.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;음…당황하지 않고, 써있는 대로 명령어를 실행해보았다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv init

# Load rbenv automatically by appending
# the following to ~/.zshrc:

eval &quot;$(rbenv init -)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;후…다시 한 번 당황하지 않고, 써있는 대로 실행&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ eval &quot;$(rbenv init -)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 다시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ rbenv shell 3.0.2&lt;/code&gt;을 실행하니 드디어 되었다. 그리고 빠르게 디폴트 버전으로 설정해주었다. (나중에야 알았지만 이미 위 명령어로 Ruby 버전이 바뀌어있었다.)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv global 3.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ bundle exec jekyll serve&lt;/code&gt; 실행해보니 겁나 잘된다!!! 적어도 내가 찾아봤을 때는 이런 경우에 관해 자세히 쓴 블로그는 못 봐서 이렇게 글을 쓰게 되었다. 따라서 혹시 이런 문제가 있다면&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;결론 : gem env로 버전 확인 먼저 해보세요&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;.&lt;br /&gt;
.&lt;br /&gt;
.&lt;br /&gt;
. &lt;br /&gt;
.&lt;/p&gt;
&lt;h2 id=&quot;또-다른-이슈&quot;&gt;또 다른 이슈&lt;/h2&gt;
&lt;p&gt;하…끝내고 싶었는데 또 후속 문제가 찾아왔다. 터미널을 끄고 다시 실행하면 또 Ruby 버전이 2.6.3이 되어있다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv global

3.0.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;global&lt;/code&gt; 버전은 문제 없는데????&lt;/p&gt;

&lt;p&gt;PATH가 잘못 들여져하고 확인해봤더니&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ env | grep PATH

PATH=/Users/yooyoungseok/.gem/ruby/2.6.0/bin:/Users/yooyoungseok/.gem/ruby/2.6.0/bin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/Apple/usr/bin
MANPATH=/opt/homebrew/share/man::
INFOPATH=/opt/homebrew/share/info:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2.6.0??? 도대체 이게 왜 환경 변수에 왜 있는 거지?&lt;/p&gt;

&lt;p&gt;그 이후로도 이것저것 다 해보다가 결국 초심으로 돌아가서 Ruby 버전 관리에 대한 문서로 돌아갔다. 그러다 보니 하나 걸리는 게&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pre-installed macOS system Ruby&lt;/code&gt;&lt;br /&gt;
MAC OS에서는 기본적으로 시스템에 Ruby가 있다고 한다…
버전은 2.6.3이란다. 이마를 탁! 쳤다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ which ruby

/usr/bin/ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 보인다면 이미 깔려있는 거…문서에서는 그냥 무시하고 다른 버전 관리 시스템(asdf, chruby, rbenv, or rvm)들을 이용해서 사용하면 된다는 데 이것이 환경 변수에 영향을 끼쳐서 터미널을 새로 만들 시 계속해서 영향을 주고 있는 가보다. MAC 사용자인 이상 안고갈 수 밖에 없는 가 보다…:sob:&lt;/p&gt;

&lt;p&gt;그래서 나같은 경우는 그나마 편하게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;안에&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;
eval &quot;$(rbenv init -)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;적어놓고 serve 해야될 시에&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;해주기로 했다.&lt;/p&gt;</content><author><name>유영석</name><email>richpinkr99@gmail.com</email></author><summary type="html">jekyll serve 명령 실행이 bug report에 대한 내용과 함께 abort 될 때</summary></entry></feed>